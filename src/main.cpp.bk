#include <M5Core2.h>
#include <map>
#include <Kalman.h>
 
float accX = 0.0F; // Define variables for storing inertial sensor data
float accY = 0.0F;
float accZ = 0.0F;
 
float gyroX = 0.0F;
float gyroY = 0.0F;
float gyroZ = 0.0F;
 
float pitch = 0.0F;
float roll = 0.0F;
float yaw = 0.0F;
 
Kalman kalmanX;
Kalman kalmanY;

long lastMs = 0;
long tick = 0;

// RTC
RTC_DateTypeDef RTC_DateStruct; // Data
RTC_TimeTypeDef RTC_TimeStruct; // Time
// File output_file;
bool isLogging = true;
int num = 0;
// Activities
int activity = 0; // 0: 'updown', 1: 'leftright', 2: 'circle'
std::map<int, std::string> activityName;
 
String zeroPadding(int num, int cnt)
{
  char tmp[256];
  char prm[5] = {'%', '0', (char)(cnt + 48), 'd', '\0'};
  sprintf(tmp, prm, num);
  return tmp;
}
 
/* After M5Core2 is started or reset
the program in the setUp () function will be run, and this part will only be run once. */
void setup()
{
  // Activity Name
  activityName[0] = " updown ";
  activityName[1] = " leftright ";
  activityName[2] = " circle";
  
 
  M5.begin();                        // Init M5Core.
  M5.IMU.Init();                     // Init IMU sensor.
  M5.Lcd.fillScreen(BLACK);          // Set the screen background color to black.
  M5.Lcd.setTextColor(GREEN, BLACK); // Sets the foreground color and background color of the displayed text.
  M5.Lcd.setTextSize(2);             // Set the font size.
  M5.Rtc.GetDate(&RTC_DateStruct);
  M5.Rtc.GetTime(&RTC_TimeStruct);
  String datetime = zeroPadding(RTC_DateStruct.Year, 4) + zeroPadding(RTC_DateStruct.Month, 2) + zeroPadding(RTC_DateStruct.Date, 2) + "-" + zeroPadding(RTC_TimeStruct.Hours, 2) + zeroPadding(RTC_TimeStruct.Minutes, 2) + zeroPadding(RTC_TimeStruct.Seconds, 2);
  lastMs = micros();
}
 
void loop()
{
  M5.update();
   
  // Stores the triaxial gyroscope data of the inertial sensor to the relevant variable
  M5.IMU.getGyroData(&gyroX, &gyroY, &gyroZ);
  M5.IMU.getAccelData(&accX, &accY, &accZ); // Stores the triaxial accelerometer.
  M5.IMU.getAhrsData(&pitch, &roll, &yaw);  // Stores the inertial sensor attitude.
 
  /* The M5Core screen is 320x240 pixels, starting at the top left corner of the screen (0,0).
  gyroscope output related  gyroscope output related. */
  M5.Lcd.setCursor(0, 20);               // Move the cursor position to (x,y).
  M5.Lcd.printf("gyroX,  gyroY, gyroZ"); // Screen printingformatted string.
  M5.Lcd.setCursor(0, 42);
  M5.Lcd.printf("%6.2f %6.2f%6.2f o/s", gyroX, gyroY, gyroZ);
  // Accelerometer output is related
  M5.Lcd.setCursor(0, 70);
  M5.Lcd.printf("accX,   accY,  accZ");
  M5.Lcd.setCursor(0, 92);
  M5.Lcd.printf("%5.2f  %5.2f  %5.2f G", accX, accY, accZ);
 
  // Pose output is related
  M5.Lcd.setCursor(0, 120);
  M5.Lcd.printf("pitch,  roll,  yaw");
  M5.Lcd.setCursor(0, 142);
  M5.Lcd.printf("%5.2f  %5.2f  %5.2f deg", pitch, roll, yaw);
 


  float dt = (micros() - lastMs) / 1000000.0;
  lastMs = micros();
  float kalAngleX = kalmanX.getAngle(roll, gyroX, dt);
  M5.Lcd.setCursor(0, 175);
  M5.Lcd.printf("AngleY : %.2f ", kalAngleX);

  if (M5.BtnA.wasPressed())
  {
    if (activity < activityName.size() - 1)
    {
      activity++;
    }
    else
    {
      activity = 0;
    }
    M5.Lcd.setCursor(0, 221);
    M5.Lcd.printf("%s", activityName[activity].c_str());
  }
 
  // Button B
  if (M5.BtnB.wasPressed())
  {
  }
 
  // Button C, stop logging
  if (M5.BtnC.wasPressed())
  {
    if (isLogging)
    {
      isLogging = false;
      // output_file.close();
      M5.Lcd.setCursor(180, 221);
      M5.Lcd.printf("LOG STOPPED");
    }
  }
  delay(1000); // Delay 10ms.
}